// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MwTech.Infrastructure.Persistence;

#nullable disable

namespace MwTech.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240312101815_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "C854A873-3D75-4973-AD7E-A83C95726133",
                            ConcurrencyStamp = "C778085D-D407-4936-8A19-350C6817AA5D",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "EC23C152-A1C5-4D9A-B8D4-FAE62D5F059D",
                            ConcurrencyStamp = "A1277894-E24D-490E-A3BA-83F9CF5F838D",
                            Name = "Technolog",
                            NormalizedName = "TECHNOLOG"
                        },
                        new
                        {
                            Id = "ADE32A3F-6149-475A-8155-CFE5D69ACA42",
                            ConcurrencyStamp = "B50B7D83-F6E6-4DE3-8346-7D0E8501EEB5",
                            Name = "Ksiegowy",
                            NormalizedName = "KSIEGOWY"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.AccountingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountingPeriods");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "E-mail",
                            Order = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ogólne",
                            Order = 1
                        });
                });

            modelBuilder.Entity("MwTech.Domain.Entities.AppSettingPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppSettingId");

                    b.ToTable("AppSettingsPositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppSettingId = 1,
                            Description = "Host",
                            Key = "HostSmtp",
                            Order = 1,
                            Type = 0,
                            Value = "smtp.gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AppSettingId = 1,
                            Description = "Port",
                            Key = "Port",
                            Order = 2,
                            Type = 2,
                            Value = "587"
                        },
                        new
                        {
                            Id = 3,
                            AppSettingId = 1,
                            Description = "Adres e-mail nadawcy",
                            Key = "SenderEmail",
                            Order = 3,
                            Type = 0,
                            Value = "mariusz.wieczorek.testy@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AppSettingId = 1,
                            Description = "Hasło",
                            Key = "SenderEmailPassword",
                            Order = 4,
                            Type = 4,
                            Value = "rmhfvaurzyxnuztn"
                        },
                        new
                        {
                            Id = 5,
                            AppSettingId = 1,
                            Description = "Nazwa nadawcy",
                            Key = "SenderName",
                            Order = 5,
                            Type = 0,
                            Value = "Mariusz Wieczorek"
                        },
                        new
                        {
                            Id = 6,
                            AppSettingId = 1,
                            Description = "Login nadawcy",
                            Key = "SenderLogin",
                            Order = 6,
                            Type = 0,
                            Value = ""
                        },
                        new
                        {
                            Id = 7,
                            AppSettingId = 2,
                            Description = "Czy wyświetlać banner na stronie głównej?",
                            Key = "BannerVisible",
                            Order = 1,
                            Type = 1,
                            Value = "True"
                        },
                        new
                        {
                            Id = 8,
                            AppSettingId = 2,
                            Description = "Folor footera strona głównej",
                            Key = "FooterColor",
                            Order = 2,
                            Type = 5,
                            Value = "#dc3545"
                        },
                        new
                        {
                            Id = 9,
                            AppSettingId = 2,
                            Description = "Główny adres e-mail administratora",
                            Key = "AdminEmail",
                            Order = 3,
                            Type = 0,
                            Value = "mariusz.wieczorek@kabat.pl"
                        });
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AdminRights")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Possition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rfid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SuperAdminRights")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2d1c0b97-5e74-49a1-9252-58788873dde5",
                            AccessFailedCount = 0,
                            AdminRights = false,
                            ConcurrencyStamp = "3958de97-2995-4fa4-af37-eab993b16fb2",
                            Email = "m.wieczorek1972@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mariusz",
                            IsDeleted = false,
                            LastName = "Wieczorek",
                            LockoutEnabled = true,
                            NormalizedEmail = "M.WIECZOREK1972@GMAIL.COM",
                            NormalizedUserName = "M.WIECZOREK1972@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHA2HWq0uJVCUIzYmHM+yamfiVIrNSnuinbmP43J+KJQJPFhjNVR1O46ElzpL2++wQ==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegisterDateTime = new DateTime(2024, 3, 12, 10, 18, 13, 281, DateTimeKind.Utc).AddTicks(4483),
                            SecurityStamp = "ZZNB2SYLM3POSL4P4JSV2MLP7N6KVTV4",
                            SuperAdminRights = false,
                            TwoFactorEnabled = false,
                            UserName = "m.wieczorek1972@gmail.com"
                        });
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Bom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoNotExportToIfs")
                        .HasColumnType("bit");

                    b.Property<bool>("DoNotIncludeInTkw")
                        .HasColumnType("bit");

                    b.Property<bool>("DoNotIncludeInWeight")
                        .HasColumnType("bit");

                    b.Property<decimal>("Excess")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("Layer")
                        .HasColumnType("int");

                    b.Property<bool>("OnProductionOrder")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int>("PartId")
                        .HasColumnType("int");

                    b.Property<decimal>("PartQty")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("SetVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("SetId");

                    b.HasIndex("SetVersionId");

                    b.ToTable("Boms");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.BomTree", b =>
                {
                    b.Property<decimal>("FinalPartProductQty")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("FinalPartProductWeight")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("HowManyParts")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PartContentsOfRubber")
                        .IsRequired()
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("PartDensity")
                        .IsRequired()
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<bool>("PartDoesNotIncludeInWeight")
                        .HasColumnType("bit");

                    b.Property<string>("PartGrp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PartOnProductionOrder")
                        .HasColumnType("bit");

                    b.Property<int>("PartOrdinalNo")
                        .HasColumnType("int");

                    b.Property<int>("PartProductId")
                        .HasColumnType("int");

                    b.Property<string>("PartProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PartProductQty")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("PartProductVersionId")
                        .HasColumnType("int");

                    b.Property<int>("PartScalesId")
                        .HasColumnType("int");

                    b.Property<string>("PartUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartUnitId")
                        .HasColumnType("int");

                    b.Property<string>("SetGrp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SetProductId")
                        .HasColumnType("int");

                    b.Property<string>("SetProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SetProductQty")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("SetProductVersionId")
                        .HasColumnType("int");

                    b.Property<string>("SetUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SetUnitId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("BomTrees", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Comarch.ComarchBom", b =>
                {
                    b.Property<string>("czas_filtrowania_1kg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("czas_mieszania")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("db_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_receptury")
                        .HasColumnType("int");

                    b.Property<int>("id_skladnika")
                        .HasColumnType("int");

                    b.Property<int>("id_towaru")
                        .HasColumnType("int");

                    b.Property<decimal>("ilosc_ewidencyjna")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("ilosc_skladnika")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("jm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("jm_skladnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kod_skladnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kod_towaru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("koszt_ewidencyjny")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("nazwa_skladnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nazwa_towaru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("receptura_domyslna")
                        .HasColumnType("smallint");

                    b.Property<string>("server_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("symbol_receptury")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("waga_brutto")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("waga_netto")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.ToTable((string)null);

                    b.ToView("ComarchBoms", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Comarch.ComarchTwrCost", b =>
                {
                    b.Property<decimal>("Cost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ComarchTwrCost", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Comarch.ComarchTwrKarta", b =>
                {
                    b.Property<string>("twr_kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("ComarchTwrKarty", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ComparedRecipeIfsVsMwTech", b =>
                {
                    b.Property<string>("AlternativeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IfsComponentPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IfsConsumptionItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("IfsPartsByWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsQtyPerAssembly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsShrinkageFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsProductActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LineSequence")
                        .HasColumnType("int");

                    b.Property<string>("MwComponentPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MwConsumptionItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MwQtyPerAssembly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MwShrinkageFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PartNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RevisionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestComponentPart")
                        .HasColumnType("int");

                    b.Property<int>("TestExistAlternativeNo")
                        .HasColumnType("int");

                    b.Property<int>("TestExistsRevisionNo")
                        .HasColumnType("int");

                    b.Property<int>("TestQtyPerAssembly")
                        .HasColumnType("int");

                    b.Property<int>("TestShrinkageFactor")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("ComparedRecipesIfsVsMwTech", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ComparedRouteIfsVsMwTech", b =>
                {
                    b.Property<string>("AlternativeNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CrewSizeTest")
                        .HasColumnType("int");

                    b.Property<string>("Idx")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdxNo")
                        .HasColumnType("int");

                    b.Property<string>("IfsAlternativeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("IfsCrewSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IfsLaborClassNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("IfsLaborRunFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsLaborSetupTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsMachRunFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsMachSetupTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsMoveTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IfsOperationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IfsOperationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("IfsOverlap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IfsRunTimeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("IfsSetupCrewSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IfsSetupLaborClassNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IfsToolId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IfsToolQuantity")
                        .HasColumnType("int");

                    b.Property<string>("IfsWorkCenterNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaborClassNoTest")
                        .HasColumnType("int");

                    b.Property<int>("LaborRunFactorTest")
                        .HasColumnType("int");

                    b.Property<int>("LaborSetupTimeTest")
                        .HasColumnType("int");

                    b.Property<int>("MachRunFactorTest")
                        .HasColumnType("int");

                    b.Property<int>("MachSetupTimeTest")
                        .HasColumnType("int");

                    b.Property<int>("MoveTimeTest")
                        .HasColumnType("int");

                    b.Property<string>("MwtAlternativeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MwtCrewSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MwtLaborClassNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MwtLaborRunFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MwtLaborSetupTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MwtMachRunFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MwtMachSetupTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MwtMoveTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MwtOperationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MwtOverlap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MwtRunTimeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MwtSetupCrewSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MwtSetupLaborClassNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MwtToolId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MwtToolQuantity")
                        .HasColumnType("int");

                    b.Property<string>("MwtWorkCenterNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperationDescriptionTest")
                        .HasColumnType("int");

                    b.Property<string>("OperationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OverlapTest")
                        .HasColumnType("int");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevisionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoutePositionId")
                        .HasColumnType("int");

                    b.Property<int>("SetupCrewSizeTest")
                        .HasColumnType("int");

                    b.Property<int>("SetupLaborClassNoTest")
                        .HasColumnType("int");

                    b.Property<int>("TestLineExists")
                        .HasColumnType("int");

                    b.Property<int>("ToolIdTest")
                        .HasColumnType("int");

                    b.Property<int>("ToolQuantityTest")
                        .HasColumnType("int");

                    b.Property<int>("WorkCenterNoTest")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("ComparedRoutesIfsVsMwTech", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ComparedStructureIfsVsMwTech", b =>
                {
                    b.Property<string>("AlternativeNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IfsComponentPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IfsConsumptionItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("IfsQtyPerAssembly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IfsShrinkageFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsProductActive")
                        .HasColumnType("bit");

                    b.Property<int>("LineSequence")
                        .HasColumnType("int");

                    b.Property<string>("MwComponentPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MwConsumptionItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MwQtyPerAssembly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MwShrinkageFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RevisionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestComponentPart")
                        .HasColumnType("int");

                    b.Property<int>("TestExistAlternativeNo")
                        .HasColumnType("int");

                    b.Property<int>("TestExistsRevisionNo")
                        .HasColumnType("int");

                    b.Property<int>("TestProductExists")
                        .HasColumnType("int");

                    b.Property<int>("TestQtyPerAssembly")
                        .HasColumnType("int");

                    b.Property<int>("TestRevAndAltExists")
                        .HasColumnType("int");

                    b.Property<int>("TestShrinkageFactor")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("ComparedStructuresIfsVsMwTech", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountingPeriodId")
                        .HasColumnType("int");

                    b.Property<decimal>("EstimatedRate")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal");

                    b.Property<int>("FromCurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasPrecision(12, 4)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("FromCurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsActiveSeparateUiv", b =>
                {
                    b.Property<DateTime?>("ACTUAL_FINISH")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ACTUAL_START")
                        .HasColumnType("datetime2");

                    b.Property<string>("CONTRACT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DEPARTMENT_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ERR_DESCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCH_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ORG_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("REG_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("STATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WORK_CENTER_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WORK_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WORK_ORDER_SYMPT_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsActiveSeparateUivs", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsInventoryPartInStock", b =>
                {
                    b.Property<string>("HandlingUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QtyAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyInTransit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyOnHand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyReserved")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.ToTable((string)null);

                    b.ToView("IfsInventoryPartsInStock", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsProductRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AlternativeNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AlternativeState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ComponentPart")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("ComponentScrap")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("ConsumptionItemDb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffPhaseInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffPhaseOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineItemNo")
                        .HasColumnType("int");

                    b.Property<int>("LineSequence")
                        .HasColumnType("int");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PartStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PartsByWeight")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("PrintUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("QtyPerAssembly")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("RevisionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RevisionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("ShrinkageFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.ToTable("IfsProductRecipes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsProductStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AlternativeNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AlternativeState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ComponentPart")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("ComponentScrap")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("ConsumptionItemDb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffPhaseInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffPhaseOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LineItemNo")
                        .HasColumnType("int");

                    b.Property<int>("LineSequence")
                        .HasColumnType("int");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PartStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrintUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("QtyPerAssembly")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("RevisionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RevisionNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("ShrinkageFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.ToTable("IfsProductStructures");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternativeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AlternativeNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CrewSize")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("LaborClassNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("LaborRunFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("LaborSetupTime")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("MachRunFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MachSetupTime")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MoveTime")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("OperationDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("OperationNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Overlap")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("PartNo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RevisionNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RunTimeCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("SetupCrewSize")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("SetupLaborClassNo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ToolId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToolQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WorkCenterNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("IfsRoutes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsRoutingTool", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToolNumber")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsRoutingTools", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsScadaMaterial", b =>
                {
                    b.Property<string>("COMPONENT_PART_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OBJSTATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OPERATION_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OPERATION_NO")
                        .HasColumnType("int");

                    b.Property<DateTime>("OP_FINISH_DATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("OP_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OP_START_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("ORDERRNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PART_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PREFERRED_RESOURCE_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QTY_ISSUED")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QTY_LEFT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QTY_REQUIRED")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WORK_CENTER_NO")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsScadaMaterials", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsScadaOperation", b =>
                {
                    b.Property<string>("OBJID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OBJSTATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OPERATION_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OPERATION_NO")
                        .HasColumnType("int");

                    b.Property<DateTime>("OP_FINISH_DATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("OP_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OP_START_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("ORDERRNO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PART_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PREFERRED_RESOURCE_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QTY_LEFT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WORK_CENTER_NO")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsScadaOperations", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsSourceProductRecipe", b =>
                {
                    b.Property<string>("ALTERNATIVE_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ALTERNATIVE_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ALTERNATIVE_STATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("COMPONENT_PART")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("COMPONENT_SCRAP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CONSUMPTION_ITEM_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CONTRACT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EFF_PHASE_IN_DATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EFF_PHASE_OUT_DATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("LINE_ITEM_NO")
                        .HasColumnType("int");

                    b.Property<int>("LINE_SEQUENCE")
                        .HasColumnType("int");

                    b.Property<decimal>("PARTS_BY_WEIGHT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PART_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PART_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRINT_UNIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QTY_PER_ASSEMBLY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("REVISION_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REVISION_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SHRINKAGE_FACTOR")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable((string)null);

                    b.ToView("IfsSourceProductRecipes", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsSourceProductStructure", b =>
                {
                    b.Property<string>("ALTERNATIVE_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ALTERNATIVE_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ALTERNATIVE_STATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("COMPONENT_PART")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("COMPONENT_SCRAP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CONSUMPTION_ITEM_DB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CONTRACT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EFF_PHASE_IN_DATE")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EFF_PHASE_OUT_DATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("LINE_ITEM_NO")
                        .HasColumnType("int");

                    b.Property<int>("LINE_SEQUENCE")
                        .HasColumnType("int");

                    b.Property<string>("PART_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PART_STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRINT_UNIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QTY_PER_ASSEMBLY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("REVISION_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("REVISION_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SHRINKAGE_FACTOR")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable((string)null);

                    b.ToView("IfsSourceProductStructures", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsSourceRoute", b =>
                {
                    b.Property<string>("AlternativeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AlternativeNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CrewSize")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("LaborClassNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("LaborRunFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("LaborSetupTime")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MachRunFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MachSetupTime")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MoveTime")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("OperationDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("OperationNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Overlap")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("PartNo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RevisionNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RunTimeCode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("SetupCrewSize")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("SetupLaborClassNo")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ToolId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToolQuantity")
                        .HasColumnType("int");

                    b.Property<string>("WorkCenterNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable((string)null);

                    b.ToView("IfsSourceRoutes", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsWorkCenterMaterial", b =>
                {
                    b.Property<string>("MaterialState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperStatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("QtyAvailable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyComplete")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtyOnInboundLocations")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtyRequired")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RevisedQtyDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SetNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCenterNo")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsWorkCenterMaterials", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsWorkCenterMaterialRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QtyDelivered")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QtyRequired")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReqDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReqState")
                        .HasColumnType("int");

                    b.Property<string>("SourceLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkCenterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IfsWorkCentersMaterialsRequests");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsWorkCenterOperation", b =>
                {
                    b.Property<string>("OPERATION_DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OP_FINISH_DATE")
                        .HasColumnType("datetime2");

                    b.Property<int>("OP_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OP_START_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("ORDER_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PART_NO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QTY_COMPLETE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("REVISED_QTY_DUE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WORK_CENTER_NO")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsWorkCenterOperations", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsWorkCenterOperationsByMonthDepart", b =>
                {
                    b.Property<string>("DepartmentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpStartMonthYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PlannedProductionTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtyComplete")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtyPercentComplete")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RealProductionTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RevisedQtyDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TimePercentComplete")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalWeightCompleted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalWeightRevised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitMeas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WeightPercentComplete")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WorkCenterNo")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsWorkCenterOperationsByMonthDepartReports", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Ifs.IfsWorkCenterOperationsReport", b =>
                {
                    b.Property<string>("DepartmentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEmployee")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OpFinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OpStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OpStartDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpStartMonthYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PlannedProductionTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductionLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("QtyComplete")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RealProductionTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RealStartedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("RevisedQtyDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RouteAltDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SequenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StructureAltDescr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalWeightCompleted")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalWeightRevised")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitMeas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WeightNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WorkCenterNo")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("IfsWorkCentersOperationsReports", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MachineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MachineCategoryId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.MachineCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineCategoryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("MachineCategories");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ManufactoringRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChangeOverLabourConsumption")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ChangeOverMachineConsumption")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ChangeOverNumberOfEmployee")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal")
                        .HasDefaultValue(1m);

                    b.Property<int?>("ChangeOverResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MoveTime")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<decimal>("OperationLabourConsumption")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("OperationMachineConsumption")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Overlap")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<decimal>("ResourceQty")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 3)
                        .HasColumnType("decimal")
                        .HasDefaultValue(1m);

                    b.Property<int>("RouteVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoutingToolId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolQuantity")
                        .HasColumnType("int");

                    b.Property<int>("WorkCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ChangeOverResourceId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RouteVersionId");

                    b.HasIndex("RoutingToolId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("ManufactoringRoutes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Measurements.MeasurementHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("MeasurementHeaders");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Measurements.MeasurementPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeasurementHeaderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementHeaderId");

                    b.ToTable("MeasurementPositions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<string>("OperationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("OperationNumber")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("OperationNumber"), false);

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aps01")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Aps02")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Client")
                        .HasColumnType("bit");

                    b.Property<decimal>("ContentsOfRubber")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<decimal>("Density")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ean13Code")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Idx01")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idx02")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MwbaseMatid")
                        .HasColumnType("int");

                    b.Property<int>("MwbaseWyrobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoCalculateTkw")
                        .HasColumnType("bit");

                    b.Property<string>("OldProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ReturnedFromProd")
                        .HasColumnType("bit");

                    b.Property<int>("ScalesId")
                        .HasColumnType("int");

                    b.Property<int?>("TechCardNumber")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeightTolerance")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductNumber")
                        .IsUnique();

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoCalculateTkw")
                        .HasColumnType("bit");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PropertiesProductCategoriesMapId")
                        .HasColumnType("int");

                    b.Property<int>("RouteSource")
                        .HasColumnType("int");

                    b.Property<string>("TechCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TkwCountExcess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("PropertiesProductCategoriesMapId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountingPeriodId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CalculatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("EstimatedLabourCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("EstimatedMarkupCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("EstimatedMaterialCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("EstimatedProductLabourCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("ImportedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImported")
                        .HasColumnType("bit");

                    b.Property<decimal>("LabourCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("MarkupCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("MaterialCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductLabourCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("AccountingPeriodId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCosts");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("ProductPropertiesVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Value")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("ProductPropertiesVersionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ProductProperties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductPropertyVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted01ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted01Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted02ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted02Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlternativeNo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted01")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted02")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accepted01ByUserId");

                    b.HasIndex("Accepted02ByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPropertyVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductSettingVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted01ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted01Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted02ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted02Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted03ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted03Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlternativeNo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted01")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted02")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted03")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCsvFileDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MachineCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MwBaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MwbaseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSettingVersionNumber")
                        .HasColumnType("int");

                    b.Property<int>("Rev")
                        .HasColumnType("int");

                    b.Property<int>("WorkCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Accepted01ByUserId");

                    b.HasIndex("Accepted02ByUserId");

                    b.HasIndex("Accepted03ByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("MachineCategoryId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("ProductSettingVersions", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductSettingVersionPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MwbaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSettingVersionId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Value")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductSettingVersionId");

                    b.HasIndex("SettingId");

                    b.ToTable("ProductSettingVersionPositions", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted01ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted01Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted02ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted02Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlternativeNo")
                        .HasColumnType("int");

                    b.Property<bool>("ComarchDefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IfsDefaultVersion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted01")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted02")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MwbaseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductQty")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal");

                    b.Property<decimal>("ProductWeight")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal");

                    b.Property<bool>("ToIfs")
                        .HasColumnType("bit");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accepted01ByUserId");

                    b.HasIndex("Accepted02ByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductVersionProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("ProductVersionId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Value")
                        .HasPrecision(16, 6)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("ProductVersionId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ProductVersionProperties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.PropertiesProductCategoriesMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertiesProductCategoriesMaps", (string)null);
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideOnReport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeneralProperty")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVersionProperty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdinalNo")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertiesProductCategoriesMapId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScadaPropertyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("PropertiesProductCategoriesMapId");

                    b.HasIndex("UnitId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RecipeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScrapNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RecipeCategoryId");

                    b.HasIndex("RecipeNumber")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecipeCategories");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeManual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Duration")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int>("PositionNo")
                        .HasColumnType("int");

                    b.Property<int>("RecipeStageId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeVersionId")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeStageId");

                    b.HasIndex("RecipeVersionId");

                    b.ToTable("RecipeManuals");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacketNo")
                        .HasColumnType("int");

                    b.Property<int>("PositionNo")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductQty")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int?>("RecipePositionPackageId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeStageId")
                        .HasColumnType("int");

                    b.Property<bool>("ReturnFromProcessing")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipePositionPackageId");

                    b.HasIndex("RecipeStageId");

                    b.ToTable("RecipePositions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipePositionsPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BagIsIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal?>("CrewSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LabourClassId")
                        .HasColumnType("int");

                    b.Property<int>("PackageNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("RecipeStageId")
                        .HasColumnType("int");

                    b.Property<int>("TimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("WorkCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabourClassId");

                    b.HasIndex("RecipeStageId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("RecipePositionsPackages");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CrewSize")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DivideQtyBy")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<int?>("LabourClassId")
                        .HasColumnType("int");

                    b.Property<decimal?>("LabourRunFactor")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("MixerVolume")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MultiplyQtyBy")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("PrevStageQty")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductNumber")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("RecipeVersionId")
                        .HasColumnType("int");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNo")
                        .HasColumnType("int");

                    b.Property<int>("StageTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int?>("WorkCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabourClassId");

                    b.HasIndex("RecipeVersionId");

                    b.HasIndex("WorkCenterId");

                    b.ToTable("RecipeStages");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted01ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted01Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted02ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted02Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlternativeNo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted01")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted02")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RecipeQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accepted01ByUserId");

                    b.HasIndex("Accepted02ByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contract")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal>("Cost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedCost")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal>("EstimatedMarkup")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("LaborClassNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("LabourClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("Markup")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("ResourceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("LabourClassId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ResourceNumber")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ResourceNumber"), false);

                    b.HasIndex("UnitId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.RouteVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted01ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted01Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted02ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted02Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlternativeNo")
                        .HasColumnType("int");

                    b.Property<bool>("ComarchDefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DefaultVersion")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IfsDefaultVersion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted01")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted02")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductQty")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal");

                    b.Property<bool>("ToIfs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accepted01ByUserId");

                    b.HasIndex("Accepted02ByUserId");

                    b.HasIndex("AlternativeNo");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("AlternativeNo"), false);

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VersionNumber");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("VersionNumber"), false);

                    b.ToTable("RouteVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.RoutingTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ToolNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoutingTools");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ScadaReport", b =>
                {
                    b.Property<long>("SEQ_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SEQ_ID"));

                    b.Property<string>("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HANDLING_UNIT_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LOT_BATCH_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OP_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("PART_NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QTY_ISSUED")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal");

                    b.Property<decimal>("QTY_REPORTED")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal");

                    b.Property<string>("REPORTED_BY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RESOURCE_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STATUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TIMESTAMP")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TIME_CONSUMED")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TIME_START")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TIME_STOP")
                        .HasColumnType("datetime2");

                    b.Property<string>("TYPE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WORK_CENTER_NO")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SEQ_ID");

                    b.ToTable("ScadaReport");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlwaysOnPrintout")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideOnPrintout")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNumeric")
                        .HasColumnType("bit");

                    b.Property<int>("MachineCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int>("SettingCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SettingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Value")
                        .HasPrecision(12, 5)
                        .HasColumnType("decimal");

                    b.HasKey("Id");

                    b.HasIndex("MachineCategoryId");

                    b.HasIndex("SettingCategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.SettingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SettingCategoryNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MachineCategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("SettingCategories");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Idx01")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Idx02")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Idx01", "Idx02")
                        .IsUnique()
                        .HasFilter("[Idx01] IS NOT NULL AND [Idx02] IS NOT NULL");

                    b.ToTable("Temps");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Tyres.Tyre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoadIndex")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlyRating")
                        .HasColumnType("int");

                    b.Property<decimal>("RimDiameterInInches")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TyreNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("TyreNumber")
                        .IsUnique();

                    b.ToTable("Tyres");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Tyres.TyreVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted01ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted01Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Accepted02ByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Accepted02Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted01")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccepted02")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TyreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accepted01ByUserId");

                    b.HasIndex("Accepted02ByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("TyreId");

                    b.ToTable("TyreVersion");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Boolean")
                        .HasColumnType("bit");

                    b.Property<bool>("Cost")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodInSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("Time")
                        .HasColumnType("bit");

                    b.Property<string>("UnitCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Weight")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MwTech.Domain.Entities.AppSettingPosition", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.AppSetting", "AppSettings")
                        .WithMany("Positions")
                        .HasForeignKey("AppSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSettings");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Bom", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Product", "Part")
                        .WithMany("BomParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Product", "Set")
                        .WithMany("BomSets")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.ProductVersion", "SetVersion")
                        .WithMany("BomSetVersions")
                        .HasForeignKey("SetVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Set");

                    b.Navigation("SetVersion");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.CurrencyRate", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.AccountingPeriod", "AccountingPeriod")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Currency", "FromCurrency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountingPeriod");

                    b.Navigation("FromCurrency");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Machine", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.MachineCategory", "MachineCategory")
                        .WithMany("Machines")
                        .HasForeignKey("MachineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineCategory");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.MachineCategory", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("MachineCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ManufactoringRoute", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Resource", "ChangeOverResource")
                        .WithMany("ManufactoringChangeOvers")
                        .HasForeignKey("ChangeOverResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Operation", "Operation")
                        .WithMany("ManufactoringRoutes")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ManufactoringRoutes")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Resource", "Resource")
                        .WithMany("ManufactoringRoutes")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.RouteVersion", "RouteVersion")
                        .WithMany("ManufactoringRoutes")
                        .HasForeignKey("RouteVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.RoutingTool", "RoutingTool")
                        .WithMany("ManufactoringRoutes")
                        .HasForeignKey("RoutingToolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Resource", "WorkCenter")
                        .WithMany("ManufactoringWorkCenters")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeOverResource");

                    b.Navigation("Operation");

                    b.Navigation("ProductCategory");

                    b.Navigation("Resource");

                    b.Navigation("RouteVersion");

                    b.Navigation("RoutingTool");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Measurements.MeasurementHeader", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedMeasurementHeaders")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedMeasurementHeaders")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("MeasurementHeaders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Measurements.MeasurementPosition", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Measurements.MeasurementHeader", "MeasurementHeader")
                        .WithMany("MeasurementPositions")
                        .HasForeignKey("MeasurementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MeasurementHeader");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Operation", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Operations")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Unit", "Unit")
                        .WithMany("Operations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Product", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedProducts")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProductCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.PropertiesProductCategoriesMap", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("PropertiesProductCategoriesMapId");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductCost", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.AccountingPeriod", "AccountingPeriod")
                        .WithMany("ProductCosts")
                        .HasForeignKey("AccountingPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedProductCosts")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Currency", "Currency")
                        .WithMany("ProductCosts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedProductCosts")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("ProductCosts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountingPeriod");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Currency");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductProperty", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ProductPropertyVersion", "ProductPropertiesVersion")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductPropertiesVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Property", "Property")
                        .WithMany("ProductProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductPropertiesVersion");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductPropertyVersion", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted01ByUser")
                        .WithMany("Accepted01ProductPropertyVersions")
                        .HasForeignKey("Accepted01ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted02ByUser")
                        .WithMany("Accepted02ProductPropertyVersions")
                        .HasForeignKey("Accepted02ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedProductPropertyVersions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedProductPropertyVersions")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("ProductPropertyVersions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accepted01ByUser");

                    b.Navigation("Accepted02ByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductSettingVersion", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted01ByUser")
                        .WithMany("Accepted01ProductSettingVersions")
                        .HasForeignKey("Accepted01ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted02ByUser")
                        .WithMany("Accepted02ProductSettingVersions")
                        .HasForeignKey("Accepted02ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted03ByUser")
                        .WithMany("Accepted03ProductSettingVersions")
                        .HasForeignKey("Accepted03ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedProductSettingVersions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.MachineCategory", "MachineCategory")
                        .WithMany("ProductSetingVersions")
                        .HasForeignKey("MachineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Machine", "Machine")
                        .WithMany("ProductSetingVersions")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId");

                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("ProductSetingVersions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Resource", "WorkCenter")
                        .WithMany("ProductSettingVersions")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accepted01ByUser");

                    b.Navigation("Accepted02ByUser");

                    b.Navigation("Accepted03ByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Machine");

                    b.Navigation("MachineCategory");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Product");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductSettingVersionPosition", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedProductSettingVersionsPositions")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ProductSettingVersion", "ProductSettingVersion")
                        .WithMany("ProductSettingVersionPositions")
                        .HasForeignKey("ProductSettingVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Setting", "Setting")
                        .WithMany("ProductSettingVersionPositions")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModifiedByUser");

                    b.Navigation("ProductSettingVersion");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductVersion", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted01ByUser")
                        .WithMany("Accepted01ProductVersions")
                        .HasForeignKey("Accepted01ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted02ByUser")
                        .WithMany("Accepted02ProductVersions")
                        .HasForeignKey("Accepted02ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedProductVersions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedProductVersions")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("ProductVersions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accepted01ByUser");

                    b.Navigation("Accepted02ByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductVersionProperty", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ProductVersion", "ProductVersion")
                        .WithMany("ProductVersionProperties")
                        .HasForeignKey("ProductVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Property", "Property")
                        .WithMany("ProductVersionProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductVersion");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.PropertiesProductCategoriesMap", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Property", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Properties")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.PropertiesProductCategoriesMap", null)
                        .WithMany("Properties")
                        .HasForeignKey("PropertiesProductCategoriesMapId");

                    b.HasOne("MwTech.Domain.Entities.Unit", "Unit")
                        .WithMany("Properties")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.Recipe", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedRecipies")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedRecipies")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipeCategory", "RecipeCategory")
                        .WithMany("Recipes")
                        .HasForeignKey("RecipeCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RecipeCategory");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeManual", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipeStage", "RecipeStage")
                        .WithMany("RecipeManuals")
                        .HasForeignKey("RecipeStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipeVersion", "RecipeVersion")
                        .WithMany("RecipeManuals")
                        .HasForeignKey("RecipeVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecipeStage");

                    b.Navigation("RecipeVersion");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipePosition", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("RecipePositions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipePositionsPackage", "RecipePositionPackage")
                        .WithMany("RecipePositions")
                        .HasForeignKey("RecipePositionPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipeStage", "RecipeStage")
                        .WithMany("RecipePositions")
                        .HasForeignKey("RecipeStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RecipePositionPackage");

                    b.Navigation("RecipeStage");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipePositionsPackage", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Resource", "LabourClass")
                        .WithMany("PackageLabourClasses")
                        .HasForeignKey("LabourClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipeStage", "RecipeStage")
                        .WithMany("RecipePositionsPackages")
                        .HasForeignKey("RecipeStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Resource", "WorkCenter")
                        .WithMany("PackageWorkCenters")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LabourClass");

                    b.Navigation("RecipeStage");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeStage", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Resource", "LabourClass")
                        .WithMany("RecipeLabourClasses")
                        .HasForeignKey("LabourClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Recipes.RecipeVersion", "RecipeVersion")
                        .WithMany("RecipeStages")
                        .HasForeignKey("RecipeVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Resource", "WorkCenter")
                        .WithMany("RecipeStagesWorkCenters")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LabourClass");

                    b.Navigation("RecipeVersion");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeVersion", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted01ByUser")
                        .WithMany("Accepted01RecipeVersions")
                        .HasForeignKey("Accepted01ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted02ByUser")
                        .WithMany("Accepted02RecipeVersions")
                        .HasForeignKey("Accepted02ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedRecipeVersions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedRecipeVersions")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Recipes.Recipe", "Recipe")
                        .WithMany("RecipeVersions")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accepted01ByUser");

                    b.Navigation("Accepted02ByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Resource", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.Resource", "LabourClass")
                        .WithMany("WorkCenters")
                        .HasForeignKey("LabourClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Resources")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Unit", "Unit")
                        .WithMany("Resources")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabourClass");

                    b.Navigation("ProductCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.RouteVersion", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted01ByUser")
                        .WithMany("Accepted01RouteVersions")
                        .HasForeignKey("Accepted01ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted02ByUser")
                        .WithMany("Accepted02RouteVersions")
                        .HasForeignKey("Accepted02ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedRouteVersions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedRouteVersions")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("RouteVersions")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Product", "Product")
                        .WithMany("RouteVersions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accepted01ByUser");

                    b.Navigation("Accepted02ByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Setting", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.MachineCategory", "MachineCategory")
                        .WithMany("Settings")
                        .HasForeignKey("MachineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.SettingCategory", "SettingCategory")
                        .WithMany("Settings")
                        .HasForeignKey("SettingCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.Unit", "Unit")
                        .WithMany("Settings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineCategory");

                    b.Navigation("SettingCategory");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.SettingCategory", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.MachineCategory", "MachineCategory")
                        .WithMany("SettingCategories")
                        .HasForeignKey("MachineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MwTech.Domain.Entities.ProductCategory", null)
                        .WithMany("SettingCategories")
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("MachineCategory");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Tyres.Tyre", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedTyres")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedTyres")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Tyres.TyreVersion", b =>
                {
                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted01ByUser")
                        .WithMany("Accepted01TyreVersions")
                        .HasForeignKey("Accepted01ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "Accepted02ByUser")
                        .WithMany("Accepted02TyreVersions")
                        .HasForeignKey("Accepted02ByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedTyreVersions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.ApplicationUser", "ModifiedByUser")
                        .WithMany("ModifiedTyreVersions")
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MwTech.Domain.Entities.Tyres.Tyre", "Tyre")
                        .WithMany("TyreVersions")
                        .HasForeignKey("TyreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accepted01ByUser");

                    b.Navigation("Accepted02ByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("Tyre");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.AccountingPeriod", b =>
                {
                    b.Navigation("CurrencyRates");

                    b.Navigation("ProductCosts");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.AppSetting", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Accepted01ProductPropertyVersions");

                    b.Navigation("Accepted01ProductSettingVersions");

                    b.Navigation("Accepted01ProductVersions");

                    b.Navigation("Accepted01RecipeVersions");

                    b.Navigation("Accepted01RouteVersions");

                    b.Navigation("Accepted01TyreVersions");

                    b.Navigation("Accepted02ProductPropertyVersions");

                    b.Navigation("Accepted02ProductSettingVersions");

                    b.Navigation("Accepted02ProductVersions");

                    b.Navigation("Accepted02RecipeVersions");

                    b.Navigation("Accepted02RouteVersions");

                    b.Navigation("Accepted02TyreVersions");

                    b.Navigation("Accepted03ProductSettingVersions");

                    b.Navigation("CreatedMeasurementHeaders");

                    b.Navigation("CreatedProductCosts");

                    b.Navigation("CreatedProductPropertyVersions");

                    b.Navigation("CreatedProductSettingVersions");

                    b.Navigation("CreatedProductVersions");

                    b.Navigation("CreatedProducts");

                    b.Navigation("CreatedRecipeVersions");

                    b.Navigation("CreatedRecipies");

                    b.Navigation("CreatedRouteVersions");

                    b.Navigation("CreatedTyreVersions");

                    b.Navigation("CreatedTyres");

                    b.Navigation("ModifiedMeasurementHeaders");

                    b.Navigation("ModifiedProductCosts");

                    b.Navigation("ModifiedProductPropertyVersions");

                    b.Navigation("ModifiedProductSettingVersionsPositions");

                    b.Navigation("ModifiedProductVersions");

                    b.Navigation("ModifiedProducts");

                    b.Navigation("ModifiedRecipeVersions");

                    b.Navigation("ModifiedRecipies");

                    b.Navigation("ModifiedRouteVersions");

                    b.Navigation("ModifiedTyreVersions");

                    b.Navigation("ModifiedTyres");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CurrencyRates");

                    b.Navigation("ProductCosts");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Machine", b =>
                {
                    b.Navigation("ProductSetingVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.MachineCategory", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("ProductSetingVersions");

                    b.Navigation("SettingCategories");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Measurements.MeasurementHeader", b =>
                {
                    b.Navigation("MeasurementPositions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Operation", b =>
                {
                    b.Navigation("ManufactoringRoutes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Product", b =>
                {
                    b.Navigation("BomParts");

                    b.Navigation("BomSets");

                    b.Navigation("MeasurementHeaders");

                    b.Navigation("ProductCosts");

                    b.Navigation("ProductPropertyVersions");

                    b.Navigation("ProductSetingVersions");

                    b.Navigation("ProductVersions");

                    b.Navigation("RecipePositions");

                    b.Navigation("RouteVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("MachineCategories");

                    b.Navigation("ManufactoringRoutes");

                    b.Navigation("Operations");

                    b.Navigation("Products");

                    b.Navigation("Properties");

                    b.Navigation("Resources");

                    b.Navigation("RouteVersions");

                    b.Navigation("SettingCategories");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductPropertyVersion", b =>
                {
                    b.Navigation("ProductProperties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductSettingVersion", b =>
                {
                    b.Navigation("ProductSettingVersionPositions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.ProductVersion", b =>
                {
                    b.Navigation("BomSetVersions");

                    b.Navigation("ProductVersionProperties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.PropertiesProductCategoriesMap", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Property", b =>
                {
                    b.Navigation("ProductProperties");

                    b.Navigation("ProductVersionProperties");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.Recipe", b =>
                {
                    b.Navigation("RecipeVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeCategory", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipePositionsPackage", b =>
                {
                    b.Navigation("RecipePositions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeStage", b =>
                {
                    b.Navigation("RecipeManuals");

                    b.Navigation("RecipePositions");

                    b.Navigation("RecipePositionsPackages");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Recipes.RecipeVersion", b =>
                {
                    b.Navigation("RecipeManuals");

                    b.Navigation("RecipeStages");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Resource", b =>
                {
                    b.Navigation("ManufactoringChangeOvers");

                    b.Navigation("ManufactoringRoutes");

                    b.Navigation("ManufactoringWorkCenters");

                    b.Navigation("PackageLabourClasses");

                    b.Navigation("PackageWorkCenters");

                    b.Navigation("ProductSettingVersions");

                    b.Navigation("RecipeLabourClasses");

                    b.Navigation("RecipeStagesWorkCenters");

                    b.Navigation("WorkCenters");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.RouteVersion", b =>
                {
                    b.Navigation("ManufactoringRoutes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.RoutingTool", b =>
                {
                    b.Navigation("ManufactoringRoutes");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Setting", b =>
                {
                    b.Navigation("ProductSettingVersionPositions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.SettingCategory", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Tyres.Tyre", b =>
                {
                    b.Navigation("TyreVersions");
                });

            modelBuilder.Entity("MwTech.Domain.Entities.Unit", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Products");

                    b.Navigation("Properties");

                    b.Navigation("Resources");

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
